import { useEffect, useRef } from "react";
import { nanoid } from "nanoid";
import getTelegramUser from "../utils/getTelegramUser";
import {
  fetchPlayerByTelegramId,
  fetchPlayerByInviteCode,
  createPlayer,
  updatePlayerWithFallback,
} from "../services/playerService";
import usePlayerData from "../hooks/usePlayerData";

const useTelegramAuth = () => {
  const isCreating = useRef(false);
  const { setPlayer } = usePlayerData();

  const getInviteCode = () => {
    try {
      // 1Ô∏è‚É£ –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å –∏–∑ Telegram initData
      const startParam = window?.Telegram?.WebApp?.initDataUnsafe?.start_param;
      if (startParam) {
        console.log("üì¶ [start_param] –∏–∑ Telegram:", startParam);
        return startParam;
      }

      // 2Ô∏è‚É£ –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º URL (–µ—Å–ª–∏ –ø—Ä–∏—à—ë–ª ?invite=...)
      const params = new URLSearchParams(window.location.search);
      const urlInvite = params.get("invite");
      if (urlInvite) {
        console.log("üì¶ [invite] –∏–∑ URL:", urlInvite);
        localStorage.setItem("ref_code", urlInvite); // —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–∑–∞
        return urlInvite;
      }

      // 3Ô∏è‚É£ –ò –Ω–∞–∫–æ–Ω–µ—Ü ‚Äî localStorage
      const localRef = localStorage.getItem("ref_code");
      if (localRef) {
        console.log("üì¶ [invite] –∏–∑ localStorage:", localRef);
        return localRef;
      }

      console.warn("üì≠ Invite-–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ initData, –Ω–∏ –≤ URL, –Ω–∏ –≤ localStorage");
      return null;
    } catch (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ invite-–∫–æ–¥–∞:", err);
      return null;
    }
  };

  useEffect(() => {
    const initAuth = async () => {
      if (isCreating.current) return;
      isCreating.current = true;

      const user = getTelegramUser();
      if (!user) {
        console.warn("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω");
        isCreating.current = false;
        return;
      }

      const telegram_id = Number(user.id);
      const referrerCode = getInviteCode();
      let invited_by = null;

      if (referrerCode) {
        try {
          const referrer = await fetchPlayerByInviteCode(referrerCode);
          if (referrer) {
            invited_by = referrer.documentId;
            console.log("üîó –†–µ—Ñ–µ—Ä–∞–ª –Ω–∞–π–¥–µ–Ω:", invited_by);
          } else {
            console.warn("‚ö†Ô∏è –†–µ—Ñ–µ—Ä–∞–ª –ø–æ –∫–æ–¥—É –Ω–µ –Ω–∞–π–¥–µ–Ω:", referrerCode);
          }
        } catch (err) {
          console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ:", err);
        }
      }

      try {
        const existingPlayer = await fetchPlayerByTelegramId(telegram_id);

        if (!existingPlayer) {
          const newPlayerData = {
            telegram_id,
            username: user.username || "",
            photo_url: user.photo_url || "",
            first_name: user.first_name || "",
            last_name: user.last_name || "",
            invite_code: nanoid(8),
            ...(invited_by && {
              invited_by: { connect: [invited_by] },
            }),
          };

          console.log("üÜï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞:", newPlayerData);
          const res = await createPlayer(newPlayerData);
          const newPlayer = res.data?.data;
          if (newPlayer) {
            console.log("‚úÖ –ù–æ–≤—ã–π –∏–≥—Ä–æ–∫ —Å–æ–∑–¥–∞–Ω:", newPlayer);
            setPlayer(newPlayer);
          }
        } else {
          console.log("üë§ –ò–≥—Ä–æ–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:", existingPlayer);

          if (!existingPlayer.invited_by && invited_by) {
            console.log("üîÅ –û–±–Ω–æ–≤–ª—è–µ–º invited_by –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞");
            await updatePlayerWithFallback(existingPlayer.documentId, {
              invited_by: { connect: [invited_by] },
            });
          }

          setPlayer(existingPlayer);
        }
      } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞:", err);
      } finally {
        isCreating.current = false;
      }
    };

    initAuth();
  }, [setPlayer]);
};

export default useTelegramAuth;
