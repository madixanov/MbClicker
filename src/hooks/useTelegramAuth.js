import { useEffect, useRef } from "react";
import { nanoid } from "nanoid";
import getTelegramUser from "../utils/getTelegramUser";
import {
  fetchPlayerByTelegramId,
  fetchPlayerByInviteCode,
  createPlayer,
  updatePlayerWithFallback, // üÜï –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—å, —á—Ç–æ–±—ã —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª
} from "../services/playerService";
import usePlayerData from "../hooks/usePlayerData";

const useTelegramAuth = () => {
  const isCreating = useRef(false);
  const { setPlayer } = usePlayerData();

  const getInviteCodeFromUrl = () => {
    try {
      const startParam = window?.Telegram?.WebApp?.initDataUnsafe?.start_param;
      if (startParam) {
        console.log("üì¶ –ü–æ–ª—É—á–µ–Ω start_param –∏–∑ initDataUnsafe:", startParam);
        return startParam;
      }

      const hash = window.location.hash;
      const params = new URLSearchParams(hash.slice(1));
      const rawData = params.get("tgWebAppData");

      if (rawData) {
        const decoded = decodeURIComponent(rawData);
        const innerParams = new URLSearchParams(decoded);
        const start = innerParams.get("start");
        if (start) {
          console.log("üì¶ –ü–æ–ª—É—á–µ–Ω start –∏–∑ tgWebAppData:", start);
          return start;
        }
      }

      console.warn("üì≠ –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å invite_code (start_param)");
      return null;
    } catch (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ start_param:", err);
      return null;
    }
  };

  useEffect(() => {
    const initAuth = async () => {
      if (isCreating.current) return;
      isCreating.current = true;

      const user = getTelegramUser();
      if (!user) {
        isCreating.current = false;
        return;
      }

      const telegram_id = Number(user.id);
      const referrerCode = getInviteCodeFromUrl();

      let invited_by = null;

      if (referrerCode) {
        try {
          const referrer = await fetchPlayerByInviteCode(referrerCode);
          if (referrer) {
            invited_by = referrer.documentId;
            console.log("üîó –†–µ—Ñ–µ—Ä–∞–ª –Ω–∞–π–¥–µ–Ω:", invited_by);
          } else {
            console.warn("‚ö†Ô∏è –†–µ—Ñ–µ—Ä–∞–ª –ø–æ –∫–æ–¥—É –Ω–µ –Ω–∞–π–¥–µ–Ω:", referrerCode);
          }
        } catch (err) {
          console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ:", err);
        }
      }

      try {
        const existingPlayer = await fetchPlayerByTelegramId(telegram_id);

        if (!existingPlayer) {
          const telegramUser = {
            telegram_id,
            username: user.username || "",
            photo_url: user.photo_url || "",
            first_name: user.first_name || "",
            last_name: user.last_name || "",
            invite_code: nanoid(8),
            ...(invited_by && {
              invited_by: { connect: [invited_by] },
            }),
          };

          console.log("üÜï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞:", telegramUser);
          const res = await createPlayer(telegramUser);
          const newPlayer = res.data?.data;
          if (newPlayer) setPlayer(newPlayer);
        } else {
          // üß† –û–±–Ω–æ–≤–∏–º invited_by, –µ—Å–ª–∏ –æ–Ω –µ—â—ë –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
          if (!existingPlayer.invited_by && invited_by) {
            console.log("üîÅ –û–±–Ω–æ–≤–ª—è–µ–º invited_by –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞");
            await updatePlayerWithFallback(existingPlayer.documentId, {
              invited_by: { connect: [invited_by] },
            });
          }

          setPlayer(existingPlayer);
        }
      } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:", err);
      } finally {
        isCreating.current = false;
      }
    };

    initAuth();
  }, [setPlayer]);
};

export default useTelegramAuth;
