import { create } from 'zustand';
import getTelegramUser from '../utils/getTelegramUser';
import { fetchPlayerByTelegramId, updatePlayer, updatePlayerWithFallback } from '../services/playerService';
import useLvlStore from './lvl-store';

const useMbStore = create((set, get) => ({
  // üì¶ –°–æ—Å—Ç–æ—è–Ω–∏—è
  mbCountAll: 0,            // –û–±—â–∏–µ –∫–ª–∏–∫–∏ (–≥–ª–æ–±–∞–ª—å–Ω–æ)
  mbCount: 0,               // –ö–ª–∏–∫–∏ –∑–∞ —Å–µ—Å—Å–∏—é (–ª–æ–∫–∞–ª—å–Ω–æ)
  progressTokens: 0,        // –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
  inviteCode: '',           // –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
  isProcessing: false,      // –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π

  // üîÑ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
  setInviteCode: (value) => {
    if (typeof value === 'string' && value.trim() !== '') {
      set({ inviteCode: value.trim() });
      localStorage.setItem('pendingInviteCode', value.trim());
    }
  },

  // üìà –§–æ—Ä–º—É–ª–∞ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞ (–º–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)
  getMbIncrement: () => {
    const level = useLvlStore.getState().level || 1;
    const baseIncrement = 10;
    const levelBonus = Math.min(level - 1, 5); // –ú–∞–∫—Å–∏–º—É–º +5 –∑–∞ —É—Ä–æ–≤–Ω–∏
    return baseIncrement + levelBonus;
  },

  // üîÅ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞
  increment: async () => {
    const { getMbIncrement, mbCountAll, mbCount, progressTokens } = get();
    const increment = getMbIncrement();
    
    const newState = {
      mbCountAll: mbCountAll + increment,
      mbCount: mbCount + increment,
      progressTokens: progressTokens + increment,
    };

    set(newState);
  },

  // üîÑ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–ª–∏–∫–æ–≤
  setMbCountAll: (value) => {
    if (typeof value === 'number' && value >= 0) {
      set({ mbCountAll: value });
    }
  },

  // üîÑ –°–±—Ä–æ—Å —Å–µ—Å—Å–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  resetCount: () => set({ mbCount: 0, progressTokens: 0 }),

  // üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
  loadMbFromPlayer: async () => {
    set({ isProcessing: true });
    try {
      const user = getTelegramUser();
      if (!user) return;

      const player = await fetchPlayerByTelegramId(user.id);
      if (player) {
        set({
          mbCountAll: Number(player.clicks) || 0,
          progressTokens: Number(player.progress_tokens) || 0,
        });
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞:', error);
    } finally {
      set({ isProcessing: false });
    }
  },

  // üíæ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
  saveTokensToStrapi: async () => {
    if (get().isProcessing) return;
    
    set({ isProcessing: true });
    try {
      const user = getTelegramUser();
      if (!user) return;

      const player = await fetchPlayerByTelegramId(user.id);
      if (player?.documentId) {
        const { mbCountAll, progressTokens } = get();
        await updatePlayer(player.documentId, {
          clicks: mbCountAll,
          progress_tokens: progressTokens,
        });
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
    } finally {
      set({ isProcessing: false });
    }
  },
}));

export default useMbStore;