// store/mb-store.ts –∏–ª–∏ .js

import { create } from "zustand";
import getTelegramUser from "../utils/getTelegramUser";
import { fetchPlayerByTelegramId, updatePlayer } from "../services/playerService";
import useLvlStore from "./lvl-store";

const useMbStore = create((set, get) => ({
  // üì¶ –°–æ—Å—Ç–æ—è–Ω–∏—è
  mbCountAll: 0,
  mbCount: 0,
  progressTokens: 0,
  inviteCode: "",
  isProcessing: false,
  loaded: false, // ‚úÖ –ß—Ç–æ–±—ã –Ω–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ

  // üì¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è (–∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ –æ–¥–∏–Ω —Ä–∞–∑)
  initMbStore: () => {
    const { loaded, loadMbFromPlayer } = get();
    if (!loaded) loadMbFromPlayer();
  },

  // üîÑ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
  setInviteCode: (value) => {
    if (typeof value === "string" && value.trim() !== "") {
      const trimmed = value.trim();
      set({ inviteCode: trimmed });
      localStorage.setItem("pendingInviteCode", trimmed);
    }
  },

  // üìà –†–∞—Å—á—ë—Ç –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞
  getMbIncrement: () => {
    const level = useLvlStore.getState().level || 1;
    const baseIncrement = 10;
    const levelBonus = Math.min(level - 1, 5); // –ú–∞–∫—Å +5
    return baseIncrement + levelBonus;
  },

  // üîÅ –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç
  increment: async () => {
    const { getMbIncrement, mbCountAll, mbCount, progressTokens } = get();
    const increment = getMbIncrement();

    set({
      mbCountAll: mbCountAll + increment,
      mbCount: mbCount + increment,
      progressTokens: progressTokens + increment,
    });
  },

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
  setMbCountAll: (valueOrUpdater) => {
    set((state) => {
      const newValue =
        typeof valueOrUpdater === "function"
          ? valueOrUpdater(state.mbCountAll)
          : valueOrUpdater;

      if (typeof newValue === "number" && newValue >= 0) {
        return { mbCountAll: newValue };
      }

      // –Ω–∏—á–µ–≥–æ –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º, –µ—Å–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
      return {};
    });
  },

  // –°–±—Ä–æ—Å —Å–µ—Å—Å–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  resetCount: () => set({ mbCount: 0, progressTokens: 0 }),

  // üì§ –ó–∞–≥—Ä—É–∑–∫–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞ (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)
  loadMbFromPlayer: async () => {
    if (get().loaded || get().isProcessing) return;

    set({ isProcessing: true });
    try {
      const user = getTelegramUser();
      if (!user) return;

      console.log('loadMbfromPlayer')
      const player = await fetchPlayerByTelegramId(user.id);
      if (player) {
        set({
          mbCountAll: Number(player.clicks) || 0,
          progressTokens: Number(player.progress_tokens) || 0,
          loaded: true,
        });
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞:", error);
    } finally {
      set({ isProcessing: false });
    }
  },

  // üíæ –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
  saveTokensToStrapi: async () => {
    if (get().isProcessing) return;

    set({ isProcessing: true });
    try {
      const user = getTelegramUser();
      if (!user) return;

      console.log('savetokens')
      const player = await fetchPlayerByTelegramId(user.id);
      if (player?.documentId) {
        const { mbCountAll, progressTokens } = get();
        await updatePlayer(player.documentId, {
          clicks: mbCountAll,
          progress_tokens: progressTokens,
        });
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:", error);
    } finally {
      set({ isProcessing: false });
    }
  },
}));

export default useMbStore;
