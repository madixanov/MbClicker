import axios from "axios";
import { API_BASE_URL } from "../config/api";
import useMbStore from "../store/mb-store";

export const fetchPlayerByTelegramId = async (telegram_id) => {
  const res = await axios.get(`${API_BASE_URL}/players`, {
    params: {
      filters: {
        telegram_id: {
          $eq: telegram_id,
        },
      },
      publicationState: "preview",
    },
  });

  return res.data?.data?.[0] || null;
};

export const updatePlayer = async (documentId, fields = {}) => {
  return axios.put(`${API_BASE_URL}/players/${documentId}`, {
    data: fields,
  });
};

export const createPlayer = async (playerData) => {
  return axios.post(`${API_BASE_URL}/players`, {
    data: playerData,
  });
};

// ‚úÖ –û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ offline/–æ—à–∏–±–∫–µ
export const updatePlayerWithFallback = async (documentId, fields = {}) => {
  try {
    await updatePlayer(documentId, fields);
    console.log("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ:", fields);
    localStorage.removeItem("pendingUpdate");
  } catch (err) {
    console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: ${err}. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å: ${fields}`);
    localStorage.setItem(
      "pendingUpdate",
      JSON.stringify({ documentId, fields })
    );
  }
};

// ‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
export const retryPendingUpdate = async () => {
  const item = localStorage.getItem("pendingUpdate");
  if (!item) return;

  try {
    const { documentId, fields } = JSON.parse(item);
    await updatePlayerWithFallback(documentId, fields);
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", err);
  }
};

export const fetchDashboardPlayers = async () => {
  const res = await axios.get(`${API_BASE_URL}/players?sort=clicks:desc&pagination[limit]=3`);
  return res.data?.data;;
}

export const fetchAllPlayers = async () => {
  let page = 1;
  const pageSize = 100;
  let allPlayers = [];
  let totalPages = 1;

  do {
    const res = await axios.get(`${API_BASE_URL}/players`, {
      params: {
        'pagination[page]': page,
        'pagination[pageSize]': pageSize,
        'sort[0]': 'clicks:desc',
      },
    });

    const { data, meta } = res.data;

    allPlayers.push(...data);
    totalPages = meta.pagination.pageCount;
    page++;
  } while (page <= totalPages);

  return allPlayers;
};

export const fetchPlayerByInviteCode = async (inviteCode) => {
  const res = await axios.get(`${API_BASE_URL}/players`, {
    params: {
      filters: {
        invite_code: {
          $eq: inviteCode,
        },
      },
      publicationState: "preview", // –µ—Å–ª–∏ —Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å —á–µ—Ä–Ω–æ–≤–∏–∫–∏
    },
  });

  return res.data?.data?.[0] || null;
};

export const addInvitedFriend = async (referrerId, invitedId) => {
  const response = await axios.patch(`${API_BASE_URL}/players/${referrerId}/invited_friends`, {
    friend_id: invitedId,
  });
  return response.data?.data;
};

export const fetchPlayerWithFriends = async (telegram_id) => {
  const res = await axios.get(`${API_BASE_URL}/players`, {
    params: {
      filters: {
        telegram_id: {
          $eq: telegram_id,
        },
      },
      populate: ["invited_friends"], // üëà –≤–æ—Ç –∫–ª—é—á
      publicationState: "preview",
    },
  });

  return res.data?.data?.[0] || null;
};

export const updateReferralBonus = async (telegramId) => {
  const { setMbCountAll } = useMbStore.getState();
  const { player, setPlayer } = usePlayerData.getState();

  // –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–∞ —Å invited_friends –∏ invited_by
  const playerData = await fetchPlayerByTelegramId(telegramId);
  if (!playerData) return;

  const playerId = playerData.documentId;
  const fields = playerData;

  const invited_by = fields.invited_by?.data;
  const invited_friends = fields.invited_friends?.data || [];
  const alreadyBonusedIds = fields.invited_friends_id || [];

  let bonus = 0;
  const updatedFields = {};

  // üéÅ –ë–æ–Ω—É—Å –∑–∞ —Ç–æ, —á—Ç–æ –∏–≥—Ä–æ–∫ –±—ã–ª –ø—Ä–∏–≥–ª–∞—à—ë–Ω
  if (invited_by && !fields.referal_bonus_given) {
    bonus += 2500;
    updatedFields.referal_bonus_given = true;
  }

  // üéÅ –ë–æ–Ω—É—Å –∑–∞ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π
  const newFriends = invited_friends.filter(friend => {
    const friendId = friend.documentId;
    return !alreadyBonusedIds.includes(friendId);
  });

  if (newFriends.length > 0) {
    bonus += 2500 * newFriends.length;
    updatedFields.invited_friends_id = [
      ...alreadyBonusedIds,
      ...newFriends.map(f => f.id),
    ];
  }

  if (bonus > 0) {
    const newMbCount = (mbCountAll || 0) + bonus;
    setMbCountAll(newMbCount);

    await updatePlayer(playerId, updatedFields);
    setPlayer({
      ...player,
      ...fields,
      ...updatedFields,
    });

    console.log("üéâ –ë–æ–Ω—É—Å –Ω–∞—á–∏—Å–ª–µ–Ω:", bonus);
  }
};
