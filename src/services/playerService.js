import axios from "axios";
import { API_BASE_URL } from "../config/api";
import useMbStore from "../store/mb-store";

export const fetchPlayerByTelegramId = async (telegram_id) => {
  const res = await axios.get(`${API_BASE_URL}/players`, {
    params: {
      filters: {
        telegram_id: {
          $eq: telegram_id,
        },
      },
      publicationState: "preview",
    },
  });

  return res.data?.data?.[0] || null;
};

export const updatePlayer = async (documentId, fields = {}) => {
  return axios.put(`${API_BASE_URL}/players/${documentId}`, {
    data: fields,
  });
};

export const createPlayer = async (playerData) => {
  return axios.post(`${API_BASE_URL}/players`, {
    data: playerData,
  });
};

// ‚úÖ –û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ offline/–æ—à–∏–±–∫–µ
export const updatePlayerWithFallback = async (documentId, fields = {}) => {
  try {
    await updatePlayer(documentId, fields);
    console.log("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ:", fields);
    localStorage.removeItem("pendingUpdate");
  } catch (err) {
    console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: ${err}. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å: ${fields}`);
    localStorage.setItem(
      "pendingUpdate",
      JSON.stringify({ documentId, fields })
    );
  }
};

// ‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
export const retryPendingUpdate = async () => {
  const item = localStorage.getItem("pendingUpdate");
  if (!item) return;

  try {
    const { documentId, fields } = JSON.parse(item);
    await updatePlayerWithFallback(documentId, fields);
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", err);
  }
};

export const fetchDashboardPlayers = async () => {
  const res = await axios.get(`${API_BASE_URL}/players?sort=clicks:desc&pagination[limit]=3`);
  return res.data?.data;;
}

export const fetchAllPlayers = async () => {
  let page = 1;
  const pageSize = 100;
  let allPlayers = [];
  let totalPages = 1;

  do {
    const res = await axios.get(`${API_BASE_URL}/players`, {
      params: {
        'pagination[page]': page,
        'pagination[pageSize]': pageSize,
        'sort[0]': 'clicks:desc',
      },
    });

    const { data, meta } = res.data;

    allPlayers.push(...data);
    totalPages = meta.pagination.pageCount;
    page++;
  } while (page <= totalPages);

  return allPlayers;
};

export const fetchPlayerByInviteCode = async (inviteCode) => {
  const res = await axios.get(`${API_BASE_URL}/players`, {
    params: {
      filters: {
        invite_code: {
          $eq: inviteCode,
        },
      },
      publicationState: "preview", // –µ—Å–ª–∏ —Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ—à—å —á–µ—Ä–Ω–æ–≤–∏–∫–∏
    },
  });

  return res.data?.data?.[0] || null;
};

export const addInvitedFriend = async (referrerId, invitedId) => {
  const response = await axios.patch(`${API_BASE_URL}/players/${referrerId}/invited_friends`, {
    friend_id: invitedId,
  });
  return response.data?.data;
};

export const fetchPlayerWithFriends = async (telegram_id) => {
  const res = await axios.get(`${API_BASE_URL}/players`, {
    params: {
      filters: {
        telegram_id: {
          $eq: telegram_id,
        },
      },
      populate: ["invited_friends"], // üëà –≤–æ—Ç –∫–ª—é—á
      publicationState: "preview",
    },
  });

  return res.data?.data?.[0] || null;
};

async function updateReferralBonus(playerId) {
  const { mbCountAll, setMbCountAll } = useMbStore(); 

  // –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–∞ —Å invited_friends –∏ invited_by
  const player = await strapi.entityService.findOne('api::player.player', playerId, {
    populate: ['invited_friends', 'invited_by'],
  });

  // –¢–µ–∫—É—â–∏–π –±–æ–Ω—É—Å –∏–∑ zustand –∏–ª–∏ –∏–∑ player
  let currentMbCountAll = mbCountAll || player.clicks || 0;

  // --- 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–æ–Ω—É—Å –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å–∞–º–æ–≥–æ –∏–≥—Ä–æ–∫–∞ ---

  // –î–æ–ø—É—Å—Ç–∏–º, —É —Ç–µ–±—è –µ—Å—Ç—å –±—É–ª–µ–≤–æ –ø–æ–ª–µ player.bonus_given_for_invited_by
  // –ï—Å–ª–∏ –Ω–µ—Ç, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ Strapi
  let bonusGivenForInvitedBy = player.referal_bonus_given || false;

  // –ï—Å–ª–∏ –µ—Å—Ç—å invited_by –∏ –±–æ–Ω—É—Å –µ—â—ë –Ω–µ –Ω–∞—á–∏—Å–ª–µ–Ω
  if (player.invited_by && !bonusGivenForInvitedBy) {
    currentMbCountAll += 2500;
    bonusGivenForInvitedBy = true;
  }

  // --- 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–æ–Ω—É—Å –∑–∞ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π ---

  const invitedFriendsIds = player.invited_friends.map(f => f.documentId);
  const invitedFriendsIdField = player.invited_friends_id || [];

  const newFriends = invitedFriendsIds.filter(id => !invitedFriendsIdField.includes(id));

  if (newFriends.length > 0) {
    currentMbCountAll += 2500 * newFriends.length;
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º zustand
  setMbCountAll(currentMbCountAll);

  // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è –≤ Strapi
  await strapi.entityService.update('api::player.player', playerId, {
    data: {
      mbCountAll: currentMbCountAll,
      invited_friends_id: [...invitedFriendsIdField, ...newFriends],
      bonus_given_for_invited_by: bonusGivenForInvitedBy,
    },
  });

  return {
    mbCountAll: currentMbCountAll,
    newBonusForFriends: newFriends.length,
    bonusGivenForInvitedBy,
  };
}

export default updateReferralBonus;
